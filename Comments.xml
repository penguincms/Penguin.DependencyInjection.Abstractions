<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.DependencyInjection.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Penguin.DependencyInjection.Abstractions.Attributes.DependencyRegistrationAttribute">
            <summary>
            The base class for attributes that the DI should look for 
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Abstractions.Attributes.DependencyRegistrationAttribute.Lifetime">
            <summary>
            The lifetime of the object returned
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Abstractions.Attributes.DependencyRegistrationAttribute.#ctor(Penguin.DependencyInjection.Abstractions.Enums.ServiceLifetime)">
            <summary>
            Constructs a new instance using the provided lifetime definition
            </summary>
            <param name="lifetime">The lifetime of the instantiated dependency</param>
        </member>
        <member name="T:Penguin.DependencyInjection.Abstractions.Attributes.RegisterAttribute">
            <summary>
            Allows attributing a class so that the DI automatically registers it to itself with the given Service Provider type
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Abstractions.Attributes.RegisterAttribute.RegisteredTypes">
            <summary>
            The types that should resolve to this class
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Abstractions.Attributes.RegisterAttribute.#ctor(Penguin.DependencyInjection.Abstractions.Enums.ServiceLifetime,System.Type[])">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="lifetime">The lifetime of the object returned</param>
            <param name="registeredTypes">The types that should resolve to this class</param>
        </member>
        <member name="T:Penguin.DependencyInjection.Abstractions.Attributes.RegisterThroughMostDerivedAttribute">
            <summary>
            Registers the most derived type from this class, over and through the provided type, using the given service provider
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Abstractions.Attributes.RegisterThroughMostDerivedAttribute.RequestType">
            <summary>
            The type that will be requested by the service provider
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Abstractions.Attributes.RegisterThroughMostDerivedAttribute.#ctor(System.Type,Penguin.DependencyInjection.Abstractions.Enums.ServiceLifetime)">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="requestType">The type that will be requested by the service provider</param>
            <param name="lifetime">The lifetime of the object returned</param>
        </member>
        <member name="T:Penguin.DependencyInjection.Abstractions.Enums.ServiceLifetime">
            <summary>
            Specifies the lifetime of a service in an Microsoft.Extensions.DependencyInjection.IServiceCollection.
            </summary>
        </member>
        <member name="F:Penguin.DependencyInjection.Abstractions.Enums.ServiceLifetime.Singleton">
            <summary>
            Specifies that a single instance of the service will be created.
            </summary>
        </member>
        <member name="F:Penguin.DependencyInjection.Abstractions.Enums.ServiceLifetime.Scoped">
            <summary>
            Specifies that a new instance of the service will be created for each scope.
            </summary>
        </member>
        <member name="F:Penguin.DependencyInjection.Abstractions.Enums.ServiceLifetime.Transient">
            <summary>
            Specifies that a new instance of the service will be created every time it is
            </summary>
        </member>
        <member name="T:Penguin.DependencyInjection.Abstractions.Interfaces.IConsolidateDependencies`2">
            <summary>
            Marks a class as being capable of squashing multiple registered instances into a single instance of the registered type, intended for ListProviders that have their own internal logic about prioritizing dependency usage
            </summary>
            <typeparam name="TDependency">The type of provider that this class consolidates</typeparam>
            <typeparam name="TInstantiation">The type of provider that this class consolidates</typeparam>
        </member>
        <member name="M:Penguin.DependencyInjection.Abstractions.Interfaces.IConsolidateDependencies`2.Construct">
            <summary>
            Construct a new instance of the consolidating class. This is called before the children are 
            instantiated in the event that one of the childred indirectly requires a TDependency, so that an instance 
            can exist before resolution is called so that we dont have a 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Abstractions.Interfaces.IConsolidateDependencies`2.Populate(`1,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Squashes a list of registered instances down to a single consolidated instance
            </summary>
            <param name="instantiation">The previously constructed instance of this consolidator, ready to be filled</param>
            <param name="Instances">The IEnumerable of existing instances returned by the DI</param>
            <returns>A single squashed instance that uses all of the existing DI instances</returns>
        </member>
        <member name="T:Penguin.DependencyInjection.Abstractions.Interfaces.IRegisterDependencies">
            <summary>
            Denotes that this class should be used by the Penguin DI Engine to register dependencies on initialization
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Abstractions.Interfaces.IRegisterDependencies.RegisterDependencies(Penguin.DependencyInjection.Abstractions.Interfaces.IServiceRegister)">
            <summary>
            A method that actually calls the static instance of the Penguin DI engine to register the instances
            </summary>
        </member>
        <member name="T:Penguin.DependencyInjection.Abstractions.Interfaces.IRegisterMostDerived">
            <summary>
            When implemented, the Penguin DI system will return a transient instance of the most derived class that inherits from this one, if the class is not registered when requested
            This is useful for ensuring that consuming library implementations of a class are always selected over the class that defines this
            </summary>
        </member>
        <member name="T:Penguin.DependencyInjection.Abstractions.Interfaces.ISelfRegistering">
            <summary>
            When implemented, the Penguin DI system will create a transient instance of the object if it is unregistered when it is requested
            </summary>
        </member>
        <member name="T:Penguin.DependencyInjection.Abstractions.Interfaces.IServiceRegister">
            <summary>
            Defines a class capable of registering services to a dependency injector in the most basic form
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Abstractions.Interfaces.IServiceRegister.Register``2(Penguin.DependencyInjection.Abstractions.Enums.ServiceLifetime)">
            <summary>
            Registers TRegistration to return type TImplementation using the defined lifetime
            </summary>
            <typeparam name="TRegistration">The type that will be requested</typeparam>
            <typeparam name="TImplementation">The type that will be returned</typeparam>
            <param name="serviceLifetime">The lifetime of the instance returned</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Abstractions.Interfaces.IServiceRegister.Register(System.Type,System.Type,Penguin.DependencyInjection.Abstractions.Enums.ServiceLifetime)">
            <summary>
            Registers TRegistration to return type TImplementation using the defined lifetime
            </summary>
            <param name="TRegistration">The type that will be requested</param>
            <param name="TImplementation">The type that will be returned</param>
            <param name="serviceLifetime">The lifetime of the instance returned</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Abstractions.Interfaces.IServiceRegister.Register``1(System.Func{System.IServiceProvider,``0},Penguin.DependencyInjection.Abstractions.Enums.ServiceLifetime)">
            <summary>
            Registers TRegistration to TImplementation, and uses the provided Func to generate the result
            </summary>
            <typeparam name="TRegistration">The type that will be requested</typeparam>
            <typeparam name="TImplementation">The type that will be returned</typeparam>
            <param name="RetrieveInstance">The function that generates the result</param>
            <param name="serviceLifetime">The lifetime of the instance returned</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Abstractions.Interfaces.IServiceRegister.Register(System.Type,System.Func{System.IServiceProvider,System.Object},Penguin.DependencyInjection.Abstractions.Enums.ServiceLifetime)">
            <summary>
            Registers TRegistration to call the provided func to get its return value
            </summary>
            <param name="TRegistration">The type that will be requested</param>
            <param name="RetrieveInstance">The function that generates the result</param>
            <param name="serviceLifetime">The lifetime of the instance returned</param>
        </member>
    </members>
</doc>
